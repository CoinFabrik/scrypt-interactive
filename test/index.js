const fs = require('fs')
const tape = require('tape')
const spawn = require('tape-spawn')
const Web3 = require('web3')

// these can be generated by running the compile function
var runnerCode = "0x6060604052341561000f57600080fd5b5b6116018061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063194e10ce1461003e575b600080fd5b341561004957600080fd5b6100a2600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190505061014e565b6040518083600460200280838360005b838110156100ce5780820151818401525b6020810190506100b2565b5050505090500180602001828103825283818151815260200191508051906020019080838360005b838110156101125780820151818401525b6020810190506100f6565b50505050905090810190601f16801561013f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6101566114e2565b61015e61150a565b61016661151e565b61016e61154f565b6000610179876102b0565b9250600090505b858110156101a1576101938382846102db565b5b8080600101915050610180565b60018260000190151590811515815250506108008610156101cc576101c78387846102db565b6101de565b6101d58361044b565b82602001819052505b826000015160006004811015156101f157fe5b602002015185600060048110151561020557fe5b6020020181815250508260000151600160048110151561022157fe5b602002015185600160048110151561023557fe5b6020020181815250508260000151600260048110151561025157fe5b602002015185600260048110151561026557fe5b6020020181815250508260000151600360048110151561028157fe5b602002015185600360048110151561029557fe5b602002018181525050816020015193505b5050509250929050565b6102b861151e565b6102c482836080610487565b81600001819052506102d581610627565b5b919050565b6000806000806000610800871015156102f357600080fd5b60008714156103125761030d8860008a6000015189610655565b610440565b610400871015610346576103298860000151610713565b886000018190525061034188888a6000015189610655565b61043f565b6104007c01000000000000000000000000000000000000000000000000000000008960000151600260048110151561037a57fe5b602002015181151561038857fe5b0481151561039257fe5b0694506103a08886886107d3565b9350935093509350610436608060405190810160405280868b6000015160006004811015156103cb57fe5b6020020151188152602001858b6000015160016004811015156103ea57fe5b6020020151188152602001848b60000151600260048110151561040957fe5b6020020151188152602001838b60000151600360048110151561042857fe5b602002015118815250610713565b88600001819052505b5b5b5050505050505050565b61045361150a565b61045b61150a565b610468836000015161083c565b905061047e61047982836020610487565b61083c565b91505b50919050565b61048f6114e2565b61049761150a565b600060048551016040518059106104ab5750595b908082528060200260200182016040525b509150600090505b84518110156105725784818151811015156104db57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002828281518110151561053457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b80806001019150506104c4565b600090505b8360208202101561061d57600181017f0100000000000000000000000000000000000000000000000000000000000000028260018451038151811015156105ba57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506105f486836108e0565b60019004838260048110151561060657fe5b6020020181815250505b8080600101915050610577565b5b50509392505050565b6110006040518059106106375750595b908082528060200260200182016040525b5081604001819052505b50565b600061065f611571565b6000806000806104008910151561067557600080fd5b8860040295508960400151945087600060048110151561069157fe5b60200201518860016004811015156106a557fe5b60200201518960026004811015156106b957fe5b60200201518a60036004811015156106cd57fe5b6020020151935093509350935060208601955083868601526020860195508286860152602086019550818686015260208601955080868601525b50505050505050505050565b61071b6114e2565b60008060008085600060048110151561073057fe5b602002015186600160048110151561074457fe5b602002015187600260048110151561075857fe5b602002015188600360048110151561076c57fe5b60200201519350935093509350610787828518828518610c69565b809450819550505061079d828518828518610c69565b80925081935050506080604051908101604052808581526020018481526020018381526020018281525094505b50505050919050565b60008060008060006107e3611571565b610400881015156107f357600080fd5b876004029150886040015190506020820191508181015195506020820191508181015194506020820191508181015193506020820191508181015192505b505093509350935093565b61084461150a565b600060806040518059106108555750595b908082528060200260200182016040525b50915082600060048110151561087857fe5b6020020151905080602083015282600160048110151561089457fe5b602002015190508060408301528260026004811015156108b057fe5b602002015190508060608301528260036004811015156108cc57fe5b602002015190508060808301525b50919050565b600080600080600080604088511115610987576002886000604051602001526040518082805190602001908083835b60208310151561093557805182525b60208201915060208101905060208303925061090f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060206040518083038160008661646e5a03f1151561097757600080fd5b5050604051805190509450610af4565b600092505b87518310801561099c5750602083105b15610a3d5782601f0360080260020a88848151811015156109b957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402600102851794505b828060010193505061098c565b602092505b875183108015610a525750604083105b15610af35782603f0360080260020a8884815181101515610a6f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402600102841793505b8280600101935050610a42565b5b7f363636363636363636363636363636363636363636363636363636363636363660010291507f5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c6001029050600285821885831860028886188887188c600060405160200152604051808460001916600019168152602001836000191660001916815260200182805190602001908083835b602083101515610bac57805182525b602082019150602081019050602083039250610b86565b6001836020036101000a038019825116818451168082178552505050505050905001935050505060206040518083038160008661646e5a03f11515610bf057600080fd5b50506040518051905060006040516020015260405180846000191660001916815260200183600019166000191681526020018260001916600019168152602001935050505060206040518083038160008661646e5a03f11515610c5257600080fd5b50506040518051905095505b505050505092915050565b6000806000806000869250859150600090505b6008811015610cb557610c8f8383610d2c565b8093508194505050610ca183836110ed565b80935081945050505b600281019050610c7c565b600090505b6008811015610d2157610ce7610cd084836113f4565b610cda89846113f4565b0163ffffffff1682611417565b85179450610d0f610cf883836113f4565b610d0288846113f4565b0163ffffffff1682611417565b841793505b8080600101915050610cba565b5b5050509250929050565b600080600080600080610dc17c010000000000000000000000000000000000000000000000000000000089811515610d6057fe5b046c010000000000000000000000008a811515610d7957fe5b047c01000000000000000000000000000000000000000000000000000000008a811515610da257fe5b046c010000000000000000000000008b811515610dbb57fe5b04611431565b93509350935093506c010000000000000000000000008363ffffffff16027c01000000000000000000000000000000000000000000000000000000008563ffffffff16021795506c010000000000000000000000008163ffffffff16027c01000000000000000000000000000000000000000000000000000000008363ffffffff1602179450610ec36801000000000000000089811515610e5e57fe5b04780100000000000000000000000000000000000000000000000089811515610e8357fe5b04680100000000000000008a811515610e9857fe5b0478010000000000000000000000000000000000000000000000008c811515610ebd57fe5b04611431565b8094508195508296508397505050505078010000000000000000000000000000000000000000000000008163ffffffff1602680100000000000000008563ffffffff16021786179550680100000000000000008263ffffffff160278010000000000000000000000000000000000000000000000008463ffffffff16021785179450610fb17401000000000000000000000000000000000000000088811515610f6857fe5b0464010000000089811515610f7957fe5b04740100000000000000000000000000000000000000008b811515610f9a57fe5b046401000000008c811515610fab57fe5b04611431565b809450819550829650839750505050506401000000008163ffffffff1602740100000000000000000000000000000000000000008363ffffffff160217861795506401000000008363ffffffff1602740100000000000000000000000000000000000000008563ffffffff1602178517945061107f60018881151561103257fe5b047001000000000000000000000000000000008a81151561104f57fe5b0460018b81151561105c57fe5b047001000000000000000000000000000000008b81151561107957fe5b04611431565b8094508195508296508397505050505060018263ffffffff16027001000000000000000000000000000000008463ffffffff160217861795507001000000000000000000000000000000008163ffffffff160260018563ffffffff160217851794505b505050509250929050565b60008060008060008061118a7c01000000000000000000000000000000000000000000000000000000008981151561112157fe5b0478010000000000000000000000000000000000000000000000008a81151561114657fe5b04740100000000000000000000000000000000000000008b81151561116757fe5b047001000000000000000000000000000000008c81151561118457fe5b04611431565b93509350935093508063ffffffff166401000000008363ffffffff166401000000008663ffffffff166401000000008963ffffffff16021702170217955061121c68010000000000000000898115156111df57fe5b046401000000008a8115156111f057fe5b0460018b8115156111fd57fe5b046c010000000000000000000000008c81151561121657fe5b04611431565b809750819450829550839650505050508063ffffffff166401000000008363ffffffff166401000000008663ffffffff166401000000008963ffffffff166401000000008d021702170217021795506112ff740100000000000000000000000000000000000000008881151561128e57fe5b04700100000000000000000000000000000000898115156112ab57fe5b047c01000000000000000000000000000000000000000000000000000000008a8115156112d457fe5b0478010000000000000000000000000000000000000000000000008b8115156112f957fe5b04611431565b809650819750829450839550505050508063ffffffff166401000000008363ffffffff166401000000008663ffffffff166401000000008963ffffffff16021702170217945061139960018881151561135457fe5b046c010000000000000000000000008981151561136d57fe5b04680100000000000000008a81151561138257fe5b046401000000008b81151561139357fe5b04611431565b809550819650829750839450505050508063ffffffff166401000000008363ffffffff166401000000008663ffffffff166401000000008963ffffffff166401000000008c021702170217021794505b505050509250929050565b60006020808302610100030360020a8381151561140d57fe5b0490505b92915050565b60006020808302610100030360020a830290505b92915050565b6000806000806000858901905063020000008163ffffffff1681151561145357fe5b046080820217881897508888019050628000008163ffffffff1681151561147657fe5b04610200820217871896508787019050620800008163ffffffff1681151561149a57fe5b046120008202178618955086860190506140008163ffffffff168115156114bd57fe5b0462040000820217891898508888888894509450945094505b50945094509450949050565b6080604051908101604052806004905b60008152602001906001900390816114f25790505090565b602060405190810160405280600081525090565b60c060405190810160405280611532611585565b8152602001600080191681526020016115496115ad565b81525090565b604080519081016040528060001515815260200161156b6115c1565b81525090565b602060405190810160405280600081525090565b6080604051908101604052806004905b60008152602001906001900390816115955790505090565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a72305820ef5c715ed9f7ebe133f4e2473dbea64170f4852a77a49038e83a4c752e82381b0029"
var runnerABI = [{"constant":true,"inputs":[{"name":"input","type":"bytes"},{"name":"upToStep","type":"uint256"}],"name":"run","outputs":[{"name":"vars","type":"uint256[4]"},{"name":"proof","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}]

function compile() {
    const solc = require('solc')
    function readFile(name) {
        return fs.readFileSync(name, {encoding: 'utf-8'})
    }

    const compilerInput = {
        'language': 'Solidity',
        'sources': {
        'scryptFramework.sol': {'content': readFile('contracts/scryptFramework.sol')},
        'scryptRunner.sol': {'content': readFile('contracts/scryptRunner.sol')}
        }
    }
    var results = JSON.parse(solc.compileStandard(JSON.stringify(compilerInput)))
    runnerCode = '0x' + results['contracts']['scryptRunner.sol']['ScryptRunner']['evm']['bytecode']['object']
    runnerABI = results['contracts']['scryptRunner.sol']['ScryptRunner']['abi']
    console.log('var runnerCode = "' + runnerCode + '"')
    console.log('var runnerABI = ' + JSON.stringify(runnerABI) + '')
}
//compile()

/* start geth using

geth --dev --rpc

then use 'geth attach' with
var account = personal.newAccount('')
miner.setEtherbase(x)
miner.start()
*/
// Needs to be done every time: personal.unlockAccount(account)

var account = '0x3e345cbf6b07856e6028a27705418835cf636f1b'
// Remove if not deployed yet
var contractAddr = '0xe2369029f4e3bDcB74463349a8779e0Ee0F22d5B'
var web3 = new Web3(new Web3.providers.HttpProvider('http://127.0.0.1:8545'))

web3.eth.getBlockNumber()
.then(function (block) {
    console.log("At block " + block)
    if (contractAddr) {
        return new web3.eth.Contract(runnerABI, contractAddr);
    } else {
        return new web3.eth.Contract(runnerABI).deploy({data: runnerCode}).send({
            from: account,
            gas: 2000000
        })
    }
})
.then(function (runner) {
    console.log("Contract deployed at " + runner.options.address)
    // At higher numbers, we get "zero" as result.
    // Might be due to a timeout? If mining is activated, the number
    // is lower.
    return runner.methods.run("", 1600).call({
        from: account
    })
})
.then(function(result) {
    console.log(result);
})

//var runner = new web3.eth.Contract()


// tape('Run', function (t) {
//   t.test('run', function (st) {
//       solc.com

//     var spt = spawn(st, './solcjs --version')
//     spt.stdout.match(RegExp(pkg.version + '(-[^a-zA-A0-9.+]+)?(\\+[^a-zA-Z0-9.-]+)?'))
//     spt.end()
//   })

// })
