const fs = require('fs')
const tape = require('tape')
const spawn = require('tape-spawn')
const Web3 = require('web3')

// these can be generated by running the compile function
var runnerCode = ""
var runnerABI = [{"constant":true,"inputs":[{"name":"input","type":"bytes"},{"name":"upToStep","type":"uint256"}],"name":"run","outputs":[{"name":"proof","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}]
function compile() {
    const solc = require('solc')
    function readFile(name) {
        return fs.readFileSync(name, {encoding: 'utf-8'})
    }

    const compilerInput = {
        'language': 'Solidity',
        'sources': {
        'scryptFramework.sol': {'content': readFile('contracts/scryptFramework.sol')},
        'scryptRunner.sol': {'content': readFile('contracts/scryptRunner.sol')}
        }
    }
    var results = JSON.parse(solc.compileStandard(JSON.stringify(compilerInput)))
    runnerCode = results['contracts']['scryptRunner.sol']['ScryptRunner']['evm']['bytecode']['object']
    runnerABI = '0x'+ results['contracts']['scryptRunner.sol']['ScryptRunner']['abi']
    console.log('var runnerCode = "' + runnerCode + '"')
    console.log('var runnerABI = ' + JSON.stringify(runnerABI) + '')
}
//compile()

/* start geth using

geth --dev --rpc

then use 'geth attach' with
var account = personal.newAccount('')
miner.setEtherbase(x)
miner.start()
*/
// Needs to be done every time: personal.unlockAccount(account)

var account = '0x3e345cbf6b07856e6028a27705418835cf636f1b'
var web3 = new Web3(new Web3.providers.HttpProvider('http://127.0.0.1:8545'))
//console.log(web3)
web3.eth.getBlockNumber()
.then(function (block) {
    console.log("At block " + block)
    return new web3.eth.Contract(runnerABI).deploy({data: runnerCode}).send({
        from: account,
        gas: 4000000
    })
})
.then(function (runner) {
    console.log(runner)
})

//var runner = new web3.eth.Contract()


// tape('Run', function (t) {
//   t.test('run', function (st) {
//       solc.com

//     var spt = spawn(st, './solcjs --version')
//     spt.stdout.match(RegExp(pkg.version + '(-[^a-zA-A0-9.+]+)?(\\+[^a-zA-Z0-9.-]+)?'))
//     spt.end()
//   })

// })
